
* ACTIVE Organizing publications (pdf and other) archive
:PROPERTIES:
:DATE:     <2013-10-14 Mon 12:47>
:END:

Ideas: 

- create a tree in orgmode, by recursively scanning all subfolders in publications_other.
- the name of each node is the name of the folder
- property PATH of each node stores the current full path of the folder of the node
- to move folders around or rename them, move the node of the folder or rename it
- to send changes made in the org file on the file system, type c-c c-x r.
  This should / may go through the entire org tree, and check each node if its
  position and name reflect the actual path saved in PATH.  If not, 
  it attempts to find the folder in PATH and to move it in the position
  defined by the node position and name.
- The command also creates a list of the files contained at top level in each node,
  and places these as subnodes of that node, with property "FILE" set to t, 
  or tagged as :file:. 
- When scanning, the above command identifies already existing files in the node tree,
  and leaves those nodes unchanged. It creates a list of nodes already in the tree,
  for which no files were found (-> need manual checking) and of new files added 
  to the folder, which are not yet in the tree. 
  These "difference" lists are inserted on a per-folder basis, under subheadings: 
  "missing files" and "new files", and also tagged as such. Their nodes may then 
  be moved accordingly.  Perhaps tagging them is enough, no need to also put them
  in separate nodes. 
- Inside each node list also the files contained at top level by the node.
- The path of the file is stored in PATH.
- The full bibliographical entry in Chicago15b format is stored in property BIBENTRY.
- The standardized author-year name of the file is stored in STDNAME.
  This name is used to copy and/or link the file to a folder containing
  *all* publication files, so that they can be linked in website 
  references *independently* of the changing folder tree. 
- A command may be defined to copy all files that have STDNAME 
  property set to a target folder set in the org folder by property STDFOLDER.
  Before copying a file, the process should check whether it already exists.
  If it exists, it checks whether it has the same size as the original.
  If it hase the same size, then it is not copied. 
  Else a dialog is offered to change the STDNAME to avoid overwriting the
  older copy. 
- A command may be defined to create a http-style link pointing to the URL of the
  copy of the file in its STDNAME in an online repository, and copy that link
  to the kill buffer for pasting in websites. The command will use the property
  WEBROOT defined in the header of the org file to construct the full path of the file. 
  (see next node below for improved method for doing this)
- An variant of the above command may also use a REMOTEMOUNTROOT property to check  
  and copy the file to the remote volume mounted locally over internet. 
  By doing that immediately, one avoids having to do the copying later.
  (but see next node/note below for method to do this more reliably, 
  using a table view of all publications.)

That should do the job. 

** Processing the files for short naming and copying to share folder
:PROPERTIES:
:DATE:     <2013-10-14 Mon 19:10>
:END:

*** ACTIVE Solution 2: Using properties
:PROPERTIES:
:DATE:     <2013-10-19 Sat 00:07>
:END: 

**** Properties: 

***** Properties defined at top of file / or top of tree

- SOURCE_PATH :: Path of folder of the hierarchically stored files archive.
- PUBLISH_PATH :: Path of folder to store files in flat-list under their short names.
- EBIB_PATH :: Path of ebib file for cataloguing all files bibtex data.
- FILENAME_FILTER :: Only files matching this path will be listed. 
     Default is: "*.pdf" (Only pdf files are listed)
     To match all files, set this to "*"

***** Properties constructed by the org-list-files function

- PATH :: Full path of the file
- NAME :: Full name of file or folder
- TYPE :: If it is FILE then the node is processed for copying file etc.
- STATUS :: One of: TOCOPY DONE CONFLICT
- SHORTNAME :: Short name file, used for copying to archive

The above properties are generated by scanning the source path and publish path and by input from the user: 



**** Functions:

- org-bibedit-list-files :: create / update file list
- org-bibedit-open-source-file :: Open original file at node from source directory
- org-bibedit-open-publish-file :: Open copy of file at node from publish directory
- org-bibedit-copy-to-publish-folder :: Copy file from source to publish directory

- org-bibedit-add-bibtech-entry :: Add a bibtech entry to the specified bibtech file
     (for use with ebib)
- org-bibedit-move-file-node :: refile file or folder node and move corresponding
     file or folder to corresponding location of source directory on disc.
- org-bibedit-rename-node :: Rename file or folder at source directory 
     to reflect edited node name. 
- org-bibedit-rename-publish-file :: Rename file at publish directory
     to reflect change of edited property SHORTNAME.

Following could also be done by creating sparse-tree views or column views filtering the tree through property values. (Must yet formulate which properties are needed for that.):

- org-bibedit-list-duplicates :: Find if there are duplicates of the file 
     (or duplicates of all files?) in the source directory.
- org-bibedit-list-unpublished :: List all files that have not yet been copied
     to publish directory. 

*** CANCELLED Solution 1: Using table for file overview
CLOSED: [2013-10-19 Sat 00:05]

===========================================================================

The following approach is cancelled because of lack of API to obtain the contents of fields in a spreadsheet easitly.  Will do the processing on the org-tree itself, using properties. 

===========================================================================

Scann the entire org-mode tree containing the bibliography (as obtained
by scanning the publications_other folder above), and collect all publication entries.

Then format these entries in a table of this form: 

|---+--------------------------------+------+---------------+--------------|
| ! | filename                       | link | status        | shortname    |
|---+--------------------------------+------+---------------+--------------|
|   | RoadsComputerMusicTutorial.pdf | [[file:./ArtScience/ComputerMusic/RoadsComputerMusicTutotial.pdf][link]] | done          | Roads1998    |
|   | Allpaydin2010.pdf              | [[file:./ArtScience/ComputerMusic/RoadsComputerMusicTutotial.pdf][link]] | TODO          |              |
|   | Collins2012a.pdf               | [[file:./ArtScience/ComputerMusic/RoadsComputerMusicTutotial.pdf][link]] | done          | Collins2012a |
|   | Collins2012.pdf                | [[file:./ArtScience/ComputerMusic/RoadsComputerMusicTutotial.pdf][link]] | NAME_CONFLICT | Collins2012a |
|   | James Joyce Ulysses.pdf        | [[file:./ArtScience/ComputerMusic/RoadsComputerMusicTutotial.pdf][link]] | TODO          |              |
|   | Joyce_Ulysses.pdf              | [[file:./ArtScience/ComputerMusic/RoadsComputerMusicTutotial.pdf][link]] | DUPLICATE     |              |
|---+--------------------------------+------+---------------+--------------|

=====================================================
!!!!!!!!!!!!!! IMPLEMENTATION NOTE: !!!!!!!!!!!!!!!!!
One may use the org-collector package to construct the above table,
provided that the elements of the table have already been compiled at the 
folder scanning process and stored in the proper format in properties
of each file node. 
=====================================================

Where: 

- filename :: Full name of the file as stored in the local archive folder
              (publications_others)
- link :: Link to the file in the local archive folder,
          for opening to find/check data for correct short name. 
- status :: status of file in the check/transfer process: 
            - done: file of same size already exists in target archive
            - TODO: file not yet copied. Name should be provided
              before file is copied at the next update. 
            - DUPLICATE: A duplicate file with same name and size exists
              in another location in the local archive folder, and it should
              therefore be removed (possibly replaced by link) to save space. 
            - NAME_CONFLICT: A file with the same name but different size
              already exists at the target archive. Name should be changed.
              (for example Collins2010a.pdf, Collins2010b.pdf etc.).

The table can be sorted by file name, status or short name according to need.  To transfer the documents to the archive under their short name, one inputs (or edits the short names.).  At the end one can execute command org-transfer-pubs-to-archive.  Then Emacs goes through the list and checks if there are duplicate names. It marks those entries with DUPLICATE indicating that the names should be edited.  The editor has to edit the names until there are no more duplicates.  When this is done, Org mode will continue and copy or rename all files that are required in the archive folder.  It will also:

1. Enter the new name in the STDNAME property of the node of the file.
2. Enter the link to the online archive copy of the file. This involves concatenating:
   WEBROOT ++ STDNAME ++ EXTENSION
   (Note: EXTENSION is obtained from the original file name, and is 
   possibly stored in the node at the time of scanning the fol
